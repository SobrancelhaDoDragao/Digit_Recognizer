{"ast":null,"code":"import { createElementVNode as _createElementVNode, withModifiers as _withModifiers, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"containerQuadro\",\n  ref: \"containerQuadro\"\n};\nconst _hoisted_2 = {\n  ref: \"canvas\",\n  id: \"quadro\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"canvas\", _hoisted_2, null, 512 /* NEED_PATCH */)], 512 /* NEED_PATCH */), _createElementVNode(\"a\", {\n    href: \"\",\n    onClick: _cache[0] || (_cache[0] = _withModifiers((...args) => $options.salvarCanvas && $options.salvarCanvas(...args), [\"prevent\"])),\n    id: \"btnSalvar\",\n    class: \"BotaoComum\"\n  }, \"Pronto\")], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","ref","id","_createElementVNode","_hoisted_1","_hoisted_2","href","onClick","_cache","_withModifiers","args","$options","salvarCanvas"],"sources":["/home/eudson/Documentos/digit_recognizer/src/components/Quadro.vue"],"sourcesContent":["<template>\n\n     <div class=\"containerQuadro\" ref=\"containerQuadro\" >\n        <canvas ref=\"canvas\" id=\"quadro\"></canvas>\n                 \n        </div>\n        <a href=\"\" @click.prevent=\"salvarCanvas\" id=\"btnSalvar\" class=\"BotaoComum\">Pronto</a>\n</template>\n\n\n<script>\n\n    export default {\n        \n        methods:{\n\n            async salvarCanvas() {\n            \n            let csrfToken = await this.GetToken();\n          \n            // Obtém o elemento canvas\n            const canvas = this.$refs.canvas;\n            \n            // Obtém o objeto de contexto do canvas\n            const ctx = canvas.getContext('2d');\n             \n            \n            let DataUrl = canvas.toDataURL('image/png')\n\n            console.log(csrfToken)\n\n             // Enviar o DataURL para o servidor usando Fetch\n            await fetch('http://127.0.0.1:8000/SalvarImagem', {\n                method: 'POST',\n                \n                body: JSON.stringify({data_url: DataUrl}),\n            })\n            \n\n        },\n\n        async GetToken(){\n\n            const response = await fetch('http://127.0.0.1:8000/get_csrf');\n             \n            let dado = await response.json();\n\n            let csrfToken = await dado.csrf_token;\n\n            return dado;\n\n        }\n    },\n        mounted() {\n\n            let penSize = 5\n            let isDrawing;\n            let x;\n            let y;\n            \n            const canvas = this.$refs.canvas;\n            const c = canvas.getContext(\"2d\");\n            \n            const sizeCanvas = () => {\n                const container = this.$refs.containerQuadro;\n                canvas.width = container.clientWidth;\n                canvas.height = container.clientHeight;\n            }\n\n            sizeCanvas();\n            \n            addEventListener(\"resize\", sizeCanvas); \n            \n            canvas.addEventListener(\"mousedown\",(e)=>{\n                isDrawing = true;\n                x = e.offsetX;\n                y = e.offsetY;\n            });\n            \n            canvas.addEventListener(\"mouseup\",()=>{\n            isDrawing = false;\n            x = undefined;\n            y = undefined;\n            })\n            \n            canvas.addEventListener(\"mousemove\",(event)=>{\n            draw(event.offsetX,event.offsetY)\n            })\n            \n            c.fillStyle = \"black\"\n            c.strokeStyle = c.fillStyle\n            \n            function draw(x2,y2){\n            if(isDrawing){\n                c.beginPath();\n                c.arc(x2,y2,penSize,0,Math.PI * 2);\n                c.closePath();\n                c.fill();\n            \n                //draw line\n                drawLine(x,y,x2,y2);\n            }\n            \n            x = x2;\n            y = y2;\n            }\n            \n            function drawLine(x1,y1,x2,y2){\n            c.beginPath();\n            c.moveTo(x1,y1);\n            c.lineTo(x2,y2);\n            c.strokeStyle = c.fillStyle;\n            c.lineWidth = penSize * 2;\n            c.stroke();\n            }\n        }\n    }\n\n</script>\n"],"mappings":";;EAEUA,KAAK,EAAC,iBAAiB;EAACC,GAAG,EAAC;;;EACtBA,GAAG,EAAC,QAAQ;EAACC,EAAE,EAAC;;;6DAD3BC,mBAAA,CAGS,OAHTC,UAGS,GAFND,mBAAA,CAA0C,UAA1CE,UAA0C,8B,yBAG1CF,mBAAA,CAAqF;IAAlFG,IAAI,EAAC,EAAE;IAAEC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,cAAA,KAAAC,IAAA,KAAUC,QAAA,CAAAC,YAAA,IAAAD,QAAA,CAAAC,YAAA,IAAAF,IAAA,CAAY;IAAER,EAAE,EAAC,WAAW;IAACF,KAAK,EAAC;KAAa,QAAM,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}