{"ast":null,"code":"export default {\n  data() {\n    return {\n      digit: null\n    };\n  },\n  methods: {\n    async salvarCanvas() {\n      // Obtém o elemento canvas\n      const canvas = this.$refs.canvas;\n\n      // Obtém o objeto de contexto do canvas\n      const ctx = canvas.getContext('2d');\n      let DataUrl = canvas.toDataURL('image/png');\n      const csrfToken = await this.GetToken();\n      // Enviar o DataURL para o servidor usando Fetch\n\n      const reponse = await fetch('http://127.0.0.1:8000/PredictDigit', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRFToken': csrfToken\n        },\n        body: JSON.stringify({\n          'data_url': DataUrl\n        })\n      });\n      this.digit = await reponse.json();\n      console.log(console.log(this.digit));\n    },\n    async GetToken() {\n      const response = await fetch('http://127.0.0.1:8000/get_csrf');\n      let dado = await response.json();\n      let csrfToken = await dado.csrf_token;\n      return csrfToken;\n    }\n  },\n  mounted() {\n    let penSize = 5;\n    let isDrawing;\n    let x;\n    let y;\n    const canvas = this.$refs.canvas;\n    const c = canvas.getContext(\"2d\");\n    const sizeCanvas = () => {\n      const container = this.$refs.containerQuadro;\n      canvas.width = container.clientWidth;\n      canvas.height = container.clientHeight;\n    };\n    sizeCanvas();\n    addEventListener(\"resize\", sizeCanvas);\n    canvas.addEventListener(\"mousedown\", e => {\n      isDrawing = true;\n      x = e.offsetX;\n      y = e.offsetY;\n    });\n    canvas.addEventListener(\"mouseup\", () => {\n      isDrawing = false;\n      x = undefined;\n      y = undefined;\n    });\n    canvas.addEventListener(\"mousemove\", event => {\n      draw(event.offsetX, event.offsetY);\n    });\n    c.fillStyle = \"black\";\n    c.strokeStyle = c.fillStyle;\n    function draw(x2, y2) {\n      if (isDrawing) {\n        c.beginPath();\n        c.arc(x2, y2, penSize, 0, Math.PI * 2);\n        c.closePath();\n        c.fill();\n\n        //draw line\n        drawLine(x, y, x2, y2);\n      }\n      x = x2;\n      y = y2;\n    }\n    function drawLine(x1, y1, x2, y2) {\n      c.beginPath();\n      c.moveTo(x1, y1);\n      c.lineTo(x2, y2);\n      c.strokeStyle = c.fillStyle;\n      c.lineWidth = penSize * 2;\n      c.stroke();\n    }\n  }\n};","map":{"version":3,"names":["data","digit","methods","salvarCanvas","canvas","$refs","ctx","getContext","DataUrl","toDataURL","csrfToken","GetToken","reponse","fetch","method","headers","body","JSON","stringify","json","console","log","response","dado","csrf_token","mounted","penSize","isDrawing","x","y","c","sizeCanvas","container","containerQuadro","width","clientWidth","height","clientHeight","addEventListener","e","offsetX","offsetY","undefined","event","draw","fillStyle","strokeStyle","x2","y2","beginPath","arc","Math","PI","closePath","fill","drawLine","x1","y1","moveTo","lineTo","lineWidth","stroke"],"sources":["/home/eudson/Documentos/digit_recognizer/src/components/Quadro.vue"],"sourcesContent":["<template>\n\n     <div class=\"containerQuadro\" ref=\"containerQuadro\" >\n\n        <canvas ref=\"canvas\" id=\"quadro\"></canvas>\n                 \n        </div>\n\n        <router-link @click.prevent=\"salvarCanvas\" class='BotaoComum' :to=\"{name:'PredictDigit',params:{digit:digit}}\" >Pronto</router-link>\n \n</template>\n\n\n<script>\n\n    export default {\n\n        data(){\n            return{\n              digit:null\n            }\n        },\n        \n        methods:{\n\n            async salvarCanvas() {\n            \n            // Obtém o elemento canvas\n            const canvas = this.$refs.canvas;\n            \n            // Obtém o objeto de contexto do canvas\n            const ctx = canvas.getContext('2d');\n             \n            \n            let DataUrl = canvas.toDataURL('image/png')\n\n        \n\n            const csrfToken = await this.GetToken();\n            // Enviar o DataURL para o servidor usando Fetch\n                \n            const reponse = await fetch('http://127.0.0.1:8000/PredictDigit', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': csrfToken,\n                },\n                body: JSON.stringify({'data_url': DataUrl}),\n            });\n\n            this.digit = await reponse.json()\n\n            console.log(console.log(this.digit))\n        },\n\n        async GetToken(){\n\n            const response = await fetch('http://127.0.0.1:8000/get_csrf');\n             \n            let dado = await response.json();\n\n            let csrfToken = await dado.csrf_token;\n\n            return csrfToken;\n\n        }\n    },\n        mounted() {\n\n            let penSize = 5\n            let isDrawing;\n            let x;\n            let y;\n            \n            const canvas = this.$refs.canvas;\n            const c = canvas.getContext(\"2d\");\n            \n            const sizeCanvas = () => {\n                const container = this.$refs.containerQuadro;\n                canvas.width = container.clientWidth;\n                canvas.height = container.clientHeight;\n            }\n\n            sizeCanvas();\n            \n            addEventListener(\"resize\", sizeCanvas); \n            \n            canvas.addEventListener(\"mousedown\",(e)=>{\n                isDrawing = true;\n                x = e.offsetX;\n                y = e.offsetY;\n            });\n            \n            canvas.addEventListener(\"mouseup\",()=>{\n            isDrawing = false;\n            x = undefined;\n            y = undefined;\n            })\n            \n            canvas.addEventListener(\"mousemove\",(event)=>{\n            draw(event.offsetX,event.offsetY)\n            })\n            \n            c.fillStyle = \"black\"\n            c.strokeStyle = c.fillStyle\n            \n            function draw(x2,y2){\n            if(isDrawing){\n                c.beginPath();\n                c.arc(x2,y2,penSize,0,Math.PI * 2);\n                c.closePath();\n                c.fill();\n            \n                //draw line\n                drawLine(x,y,x2,y2);\n            }\n            \n            x = x2;\n            y = y2;\n            }\n            \n            function drawLine(x1,y1,x2,y2){\n            c.beginPath();\n            c.moveTo(x1,y1);\n            c.lineTo(x2,y2);\n            c.strokeStyle = c.fillStyle;\n            c.lineWidth = penSize * 2;\n            c.stroke();\n            }\n        }\n    }\n\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}