{"ast":null,"code":"import { createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"canvas\",\n  id: \"quadro\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass([\"containerQuadro\", _ctx.containerQuadro])\n  }, [_createElementVNode(\"canvas\", _hoisted_1, null, 512 /* NEED_PATCH */)], 2 /* CLASS */);\n}","map":{"version":3,"names":["ref","id","_createElementBlock","class","_normalizeClass","_ctx","containerQuadro","_createElementVNode","_hoisted_1"],"sources":["/home/eudson/Documentos/digit_recognizer/src/components/Quadro.vue"],"sourcesContent":["<template>\n\n     <div class=\"containerQuadro\" :class=\"containerQuadro\" >\n        <canvas ref=\"canvas\" id=\"quadro\"></canvas>\n\n        </div>\n        \n</template>\n\n\n<script>\n\nexport default {\n  mounted() {\n    let penSize = 5\n    let isDrawing;\n    let x;\n    let y;\n    \n    const canvas = this.$refs.canvas;\n    const c = canvas.getContext(\"2d\");\n    \n    sizeCanvas();\n    \n    function sizeCanvas(){\n      container = document.querySelector(\".containerQuadro\");\n    \n      canvas.width = container.clientWidth;\n      canvas.height = container.clientHeight;\n    }\n    \n    addEventListener(\"resize\", sizeCanvas); \n    \n    canvas.addEventListener(\"mousedown\",(e)=>{\n      isDrawing = true;\n      x = e.offsetX;\n      y = e.offsetY;\n    });\n    \n    canvas.addEventListener(\"mouseup\",()=>{\n      isDrawing = false;\n      x = undefined;\n      y = undefined;\n    })\n    \n    canvas.addEventListener(\"mousemove\",(event)=>{\n      draw(event.offsetX,event.offsetY)\n    })\n    \n    c.fillStyle = \"black\"\n    c.strokeStyle = c.fillStyle\n    \n    function draw(x2,y2){\n      if(isDrawing){\n        c.beginPath();\n        c.arc(x2,y2,penSize,0,Math.PI * 2);\n        c.closePath();\n        c.fill();\n    \n        //draw line\n        drawLine(x,y,x2,y2);\n      }\n    \n      x = x2;\n      y = y2;\n    }\n    \n    function drawLine(x1,y1,x2,y2){\n      c.beginPath();\n      c.moveTo(x1,y1);\n      c.lineTo(x2,y2);\n      c.strokeStyle = c.fillStyle;\n      c.lineWidth = penSize * 2;\n      c.stroke();\n    }\n  }\n}\n\n</script>"],"mappings":";;EAGgBA,GAAG,EAAC,QAAQ;EAACC,EAAE,EAAC;;;uBAD3BC,mBAAA,CAGS;IAHJC,KAAK,EAAAC,eAAA,EAAC,iBAAiB,EAASC,IAAA,CAAAC,eAAe;MACjDC,mBAAA,CAA0C,UAA1CC,UAA0C,8B"},"metadata":{},"sourceType":"module","externalDependencies":[]}